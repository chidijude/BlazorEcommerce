@inject ICategoryService CategoryService
@implements IDisposable
<div class="top-row ps-3 navbar navbar-dark  navbar-toggler-wrapper">
    <div class="container-fluid">
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-nav">
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                Home
            </NavLink>
        </div>
        @if (CategoryService.Categories == null || CategoryService.Categories.Count == 0)
        {
            
        }
        else
        {
            @foreach (var category in CategoryService.Categories)
            {
                <div class="nav-item px-2">
                    <NavLink class="nav-link" href="@category.Url">
                        @category.Name
                    </NavLink>
                </div>            
            }  
        }           
        
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetCategories();
        CategoryService.OnChanged += StateHasChanged; //TODO: Check why this is not re-rendering this page on category update
    }
    
    public void Dispose()
    {
        CategoryService.OnChanged -= StateHasChanged;
    }
}
